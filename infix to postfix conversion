#include <iostream>
#include <string.h>
using namespace std;

struct Node
{
    char data;
    struct Node *next;
}*top=NULL;

void push(char x)
{
    struct Node *t;
    t=new Node;

    if(t==NULL)
        cout<<"stack is full\n";
    else
    {
        t->data=x;
        t->next=top;
        top=t;
    }

}

char pop()
{
    struct Node *t;
    int x=-1;

    if(top==NULL)
        cout<<"Stack is Empty\n";
    else
    {
        t=top;
        top=top->next;
        x=t->data;
        delete t;
    }
    return x;
} 

void Display()
{
    struct Node *p;
    p=top;
    while(p!=NULL)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<"\n";
}

int pre(char x)
{
    if(x=='+' || x=='-')
        return 1;
    else if(x=='*' || x=='/')
        return 1;
    else 
        return 0;
}

int isOperand(char x)
{
    if(x=='+' || x=='-' || x=='*' || x=='/')
        return 0;
    else
        return 1;
}

char * IntoPost(char *infix)
{
    int i=0,j=0;
    int len=strlen(infix);
    char *postfix=new char[len+2];
    while(infix[i]!='\0')
    {
        if(isOperand(infix[i]))
            postfix[j++]=infix[i++];
        else
        {
            if(pre(infix[i]>pre(top->data)))
                push(infix[i++]);
            else 
                postfix[j++]=pop();
        }
    }
    
    while(top!=NULL)
        postfix[j++]=pop();
    postfix[j]='\0';
    
    return postfix;
}

int main()
{
 char *infix="a+b*c-d/e";
 push('#');
 char *postfix=IntoPost(infix);
 cout<<postfix;
 return 0;
}
